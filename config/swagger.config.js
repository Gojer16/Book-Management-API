const swaggerJsdoc = require('swagger-jsdoc');

const options = {
  definition: {
    openapi: '3.0.0', 
    info: {
      title: 'Book Management API', 
      version: '1.0.0',
      description: 'A simple CRUD API for managing books and user authentication.',
      contact: {
        name: 'Orlando Ascanio',
        url: 'https://www.linkedin.com/in/orlando-ascanio-dev',
        email: 'operation927@gmail.com', 
      },
    },
    servers: [
      {
        url: 'http://localhost:4000/', 
        description: 'Development Server',
      },
      {
        url: 'https://back-end-api-34k5.onrender.com/', 
        description: 'Production Server',
      },
    ],
    components: {
      securitySchemes: {
        BearerAuth: {
          type: 'http',
          scheme: 'bearer',
          bearerFormat: 'JWT',
          description: 'Enter your JWT token in the format "Bearer TOKEN"',
        },
      },
      // --- Schemas for your models and common responses ---
      schemas: {
        // Book Schema
        Book: {
          type: 'object',
          properties: {
            _id: {
              type: 'string',
              description: 'Unique ID of the book (auto-generated by MongoDB)',
              example: '60c72b2f9f1b2c001c8e4d3a',
            },
            title: {
              type: 'string',
              description: 'Title of the book',
              example: 'The Great Gatsby',
            },
            author: {
              type: 'string',
              description: 'Author of the book',
              example: 'F. Scott Fitzgerald',
            },
            publicationYear: {
              type: 'integer',
              description: 'Year of publication',
              example: 1925,
            },
            genre: {
              type: 'string',
              description: 'Genre of the book',
              example: 'Classic',
            },
            description: {
              type: 'string',
              description: 'A brief description or summary of the book',
              example: 'A novel about the American Dream.',
            },
            createdAt: {
              type: 'string',
              format: 'date-time',
              description: 'Timestamp when the book record was created',
              example: '2023-10-26T10:00:00.000Z',
            },
            updatedAt: {
              type: 'string',
              format: 'date-time',
              description: 'Timestamp when the book record was last updated',
              example: '2023-10-26T10:30:00.000Z',
            },
          },
          required: ['title', 'author', 'publicationYear'], // Fields required for creation
          example: { // Full example object
            _id: "60c72b2f9f1b2c001c8e4d3a",
            title: "The Great Gatsby",
            author: "F. Scott Fitzgerald",
            publicationYear: 1925,
            genre: "Classic",
            description: "A novel about the American Dream.",
            createdAt: "2023-10-26T10:00:00.000Z",
            updatedAt: "2023-10-26T10:30:00.000Z"
          }
        },
        // User Login/Register Request Schema (for body)
        UserCredentials: {
          type: 'object',
          properties: {
            email: {
              type: 'string',
              format: 'email',
              description: 'User\'s email address',
              example: 'user@example.com',
            },
            password: {
              type: 'string',
              format: 'password',
              description: 'User\'s password (min 8 characters)',
              minLength: 8,
              example: 'MyStrongP@ssw0rd123',
            },
          },
          required: ['email', 'password'],
        },
        // Authentication Token Response Schema
        AuthToken: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: true,
            },
            token: {
              type: 'string',
              description: 'JWT authentication token',
              example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwYzcyYjJmOWYxYjJjMDAxYzhlNGQzYSIsImlhdCI6MTYyMzYwMDYwMCwiZXhwIjoxNjIzNjAzNjAwfQ.YOUR_JWT_TOKEN_HERE',
            },
          },
        },
        // Generic Error Response Schema (for 500, 409 etc.)
        Error: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: false,
            },
            message: {
              type: 'string',
              example: 'Something went wrong on the server.',
            },
            stack: {
              type: 'string',
              description: 'Stack trace (only in development)',
              example: 'Error: Something went wrong\n at ...',
            },
          },
        },
        // Validation Error Response Schema (for 400 from Joi or Mongoose)
        ValidationError: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: false,
            },
            message: {
              type: 'string',
              example: 'Validation Error',
            },
            errors: {
              type: 'array',
              items: {
                type: 'object',
                properties: {
                  field: {
                    type: 'string',
                    example: 'email',
                  },
                  message: {
                    type: 'string',
                    example: 'Email must be a valid email address.',
                  },
                },
              },
            },
          },
        },
        // Unauthorized Error Response Schema (for 401)
        UnauthorizedError: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: false,
            },
            message: {
              type: 'string',
              example: 'No token, authorization denied',
            },
          },
        },
        // Not Found Error Response Schema (for 404)
        NotFoundError: {
          type: 'object',
          properties: {
            success: {
              type: 'boolean',
              example: false,
            },
            message: {
              type: 'string',
              example: 'Resource not found',
            },
          },
        },
      },
    },
  },
  // Paths to files containing OpenAPI documentation comments
  apis: [
    './routes/*.js', // Look for comments in your route files
  ],
};

const swaggerSpec = swaggerJsdoc(options);

module.exports = swaggerSpec;